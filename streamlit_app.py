import streamlit as st
import pandas as pd
import os
import tempfile
import json
from datetime import datetime
from PIL import Image
import plotly.express as px
from utils.config import Config
from utils.helpers import ensure_directories, clean_temp_files, validate_csv_file
from main import EDACrewSystem

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="EDA Agente Inteligente",
    page_icon="ü§ñ",
    layout="wide",
    initial_sidebar_state="expanded"
)

# CSS customizado
st.markdown("""
<style>
    .main-header {
        text-align: center;
        padding: 2rem 0;
        background: linear-gradient(90deg, #667eea 0%, #764ba2 100%);
        color: white;
        border-radius: 10px;
        margin-bottom: 2rem;
    }
    .chat-message {
        padding: 1rem;
        border-radius: 10px;
        margin: 1rem 0;
        border-left: 4px solid #667eea;
        background-color: #f0f2f6;
    }
    .agent-response {
        padding: 1rem;
        border-radius: 10px;
        margin: 1rem 0;
        border-left: 4px solid #28a745;
        background-color: #d4edda;
    }
    .warning-box {
        padding: 1rem;
        border-radius: 10px;
        background-color: #fff3cd;
        border: 1px solid #ffeaa7;
        margin: 1rem 0;
    }
    .success-box {
        padding: 1rem;
        border-radius: 10px;
        background-color: #d1edff;
        border: 1px solid #0066cc;
        margin: 1rem 0;
    }
    .dataset-info {
        padding: 1rem;
        border-radius: 10px;
        background-color: #e8f4fd;
        border: 1px solid #0066cc;
        margin: 1rem 0;
    }
    .stButton > button {
        width: 100%;
        margin: 0.25rem 0;
    }
</style>
""", unsafe_allow_html=True)

def initialize_session_state():
    """Inicializa o estado da sess√£o"""
    if 'eda_system' not in st.session_state:
        st.session_state.eda_system = None
    if 'dataset_loaded' not in st.session_state:
        st.session_state.dataset_loaded = False
    if 'chat_history' not in st.session_state:
        st.session_state.chat_history = []
    if 'current_dataset_info' not in st.session_state:
        st.session_state.current_dataset_info = {}
    if 'current_config' not in st.session_state:
        st.session_state.current_config = ""
    if 'system_initialized' not in st.session_state:
        st.session_state.system_initialized = False
    if 'dataset_source' not in st.session_state:
        st.session_state.dataset_source = ""
    if 'session_finalized' not in st.session_state:
        st.session_state.session_finalized = False

def handle_rate_limit_error(error_msg: str, provider: str):
    """Fun√ß√£o para tratar rate limits de forma inteligente"""
    if "rate limit" in error_msg.lower() or "rate_limit_exceeded" in error_msg:
        st.error("‚è≥ **Rate Limit Atingido!** Reduza tokens na sidebar ou mude para OpenAI.")
        
        col1, col2 = st.columns(2)
        with col1:
            if st.button("üîÑ Reduzir Tokens", key="reduce_tokens"):
                if provider == "groq":
                    st.session_state.tokens_slider = 200
                    st.rerun()
        with col2:
            if st.button("üöÄ Mudar OpenAI", key="switch_openai"):
                st.session_state.llm_provider_select = "openai"
                st.rerun()
        
        return True
    return False

def setup_sidebar():
    """Configura a barra lateral - VERS√ÉO CORRIGIDA"""
    st.sidebar.header("‚öôÔ∏è Configura√ß√µes do Sistema")
    
    # CORRE√á√ÉO 1: OpenAI como padr√£o (mais confi√°vel)
    llm_provider = st.sidebar.selectbox(
        "üîß Provedor LLM:",
        ["openai", "groq"],  # MUDAN√áA: OpenAI primeiro para ser padr√£o
        help="OpenAI √© mais est√°vel. Groq √© r√°pido mas tem rate limits severos",
        key="llm_provider_select"
    )
    
    # CORRE√á√ÉO 2: Modelos atualizados (v√°lidos em 2025) - ORDEM OTIMIZADA
    model_options = {
        "groq": [
            "llama-3.3-70b-versatile",   # PRIMEIRO: Mais poderoso e atualizado
            "llama-3.1-8b-instant",      # Segundo: Mais r√°pido
            "openai/gpt-oss-120b",       # Terceiro: Modelo OpenAI open
            "qwen/qwen3-32b"             # Quarto: Substituiu mistral
        ],
        "openai": [
            "gpt-4o-mini",              # PRIMEIRO: Mais eficiente e barato
            "gpt-3.5-turbo",            # Segundo: Cl√°ssico confi√°vel
            "gpt-4",                    # Terceiro: Mais poderoso
            "gpt-4-turbo-preview"       # Quarto: Mais recente
        ]
    }
    
    model_name = st.sidebar.selectbox(
        "üéØ Modelo:",
        model_options[llm_provider],
        index=0,
        help=f"Modelo {llm_provider.upper()} para usar",
        key="model_select"
    )
    
    # Configura√ß√µes espec√≠ficas para Groq
    if llm_provider == "groq":
        st.sidebar.warning("‚ö†Ô∏è Groq: Rate limits severos (6000 tokens/min)")
        
        # CORRE√á√ÉO 3: Limite de tokens mais baixo para Groq
        max_tokens = st.sidebar.slider(
            "üî¢ Limite Tokens (Resposta):",
            min_value=100,
            max_value=600,  # REDUZIDO: de 1000 para 600
            value=300,      # REDUZIDO: de 400 para 300
            step=50,
            help="‚ö° GROQ: Mantenha baixo para evitar rate limits!",
            key="tokens_slider"
        )
        
        # Salvar configura√ß√£o no session state
        st.session_state.max_tokens_groq = max_tokens
        
        st.sidebar.info(f"üí° Tokens: {max_tokens} (Rate limit: {6000-max_tokens} dispon√≠veis)")
        st.sidebar.markdown("**üí° Dica:** Se der rate limit, reduza tokens ou mude para OpenAI")
        
        # Mostrar status da configura√ß√£o - AVISOS MAIS CLAROS
        if max_tokens <= 300:
            st.sidebar.success("‚úÖ Configura√ß√£o conservadora (menos rate limit)")
        elif max_tokens <= 400:
            st.sidebar.info("‚ÑπÔ∏è Configura√ß√£o balanceada")
        else:
            st.sidebar.warning("‚ö†Ô∏è Configura√ß√£o alta (mais rate limit)")
    else:
        st.sidebar.success("‚úÖ OpenAI: Mais est√°vel, sem rate limits severos")
        st.sidebar.info("üí∞ Usa cr√©ditos pagos da sua conta")
        # Tokens padr√£o para OpenAI
        max_tokens = 1500
    
    # Status das API Keys
    st.sidebar.subheader("üîë Status das Chaves")
    issues = Config.validate_keys()
    if issues:
        for issue in issues:
            st.sidebar.error(f"‚ùå {issue}")
        st.sidebar.markdown("""
        **‚ö†Ô∏è Configura√ß√£o Necess√°ria:**
        1. Edite arquivo `.env`
        2. Adicione suas API keys:
           - `GROQ_API_KEY=gsk_...`
           - `OPENAI_API_KEY=sk_...`
        3. Reinicie aplica√ß√£o
        """)
    else:
        st.sidebar.success("‚úÖ Chaves configuradas")
    
    # Status do sistema atual
    if st.session_state.get('system_initialized'):
        current = st.session_state.get('current_config', 'N√£o definido')
        st.sidebar.markdown(f"**ü§ñ Sistema Ativo:**\n`{current}`")
        
        if llm_provider == "groq":
            current_tokens = st.session_state.get('max_tokens_groq', 300)
            st.sidebar.markdown(f"**üî¢ Tokens configurados:** {current_tokens}")
    
    # Mostrar info do dataset se carregado
    if st.session_state.get('dataset_loaded'):
        dataset_source = st.session_state.get('dataset_source', 'Desconhecido')
        dataset_name = os.path.basename(dataset_source) if dataset_source else 'Dataset'
        st.sidebar.markdown(f"**üìä Dataset Ativo:**\n`{dataset_name}`")
        
        # Mostrar informa√ß√µes b√°sicas do dataset
        dataset_info = st.session_state.get('current_dataset_info', {})
        if dataset_info.get('shape'):
            st.sidebar.markdown(f"**üìè Dimens√µes:** {dataset_info['shape'][0]}√ó{dataset_info['shape'][1]}")
    
    return llm_provider, model_name, locals().get('max_tokens', 1500)

def display_first_rows_improved(df, num_rows=5):
    """NOVA FUN√á√ÉO: Mostra primeiras linhas de forma mais leg√≠vel"""
    if len(df) == 0:
        st.warning("Dataset vazio!")
        return
    
    st.subheader(f"üìã Primeiras {num_rows} linhas:")
    
    # CORRE√á√ÉO: Mostrar cada linha separadamente para melhor leitura
    for i in range(min(num_rows, len(df))):
        with st.expander(f"üìÑ Linha {i+1}", expanded=(i < 2)):  # Primeiras 2 expandidas
            row_data = df.iloc[i]
            
            # Criar tabela mais leg√≠vel
            for col_name, value in row_data.items():
                col1, col2 = st.columns([1, 2])
                with col1:
                    st.write(f"**{col_name}:**")
                with col2:
                    if pd.isna(value):
                        st.write("üîç *Valor ausente*")
                    else:
                        st.write(f"`{value}`")

def load_dataset_section():
    """Se√ß√£o de carregamento de dataset"""
    st.header("üìÅ Carregamento de Dataset")
    
    tab1, tab2, tab3 = st.tabs(["üì§ Upload Local", "üåê URL Direta", "üîó URLs Especiais"])
    
    dataset_source = None
    
    with tab1:
        uploaded_file = st.file_uploader(
            "Escolha um arquivo CSV:",
            type=['csv'],
            help="Upload de arquivo CSV do seu computador",
            key="file_uploader"
        )
        
        if uploaded_file is not None:
            temp_dir = Config.UPLOAD_DIR
            ensure_directories()
            temp_path = os.path.join(temp_dir, uploaded_file.name)
            
            with open(temp_path, "wb") as f:
                f.write(uploaded_file.getbuffer())
            
            dataset_source = temp_path
            # Mostrar nome do arquivo na caixa de texto
            st.text_input(
                "üìÅ Arquivo selecionado:", 
                value=uploaded_file.name, 
                disabled=True,
                key="file_display"
            )
            st.success(f"‚úÖ Arquivo salvo: {uploaded_file.name}")
    
    with tab2:
        # CORRE√á√ÉO: Key para detectar mudan√ßas automaticamente
        csv_url = st.text_input(
            "URL do arquivo CSV:",
            placeholder="https://exemplo.com/dados.csv",
            help="Cole a URL direta de um arquivo CSV",
            key="csv_url_input"  # Key importante para detec√ß√£o autom√°tica
        )
        
        # CORRE√á√ÉO: Verifica√ß√£o mais robusta da URL
        if csv_url and csv_url.strip():
            url_clean = csv_url.strip()
            if url_clean.startswith(('http://', 'https://')):
                dataset_source = url_clean
                # Mostrar nome do arquivo extra√≠do da URL
                url_filename = url_clean.split('/')[-1]
                if '?' in url_filename:
                    url_filename = url_filename.split('?')[0]
                if not url_filename:
                    url_filename = "arquivo.csv"
                    
                st.text_input(
                    "üåê Arquivo da URL:", 
                    value=url_filename, 
                    disabled=True,
                    key="url_display"
                )
                st.success("‚úÖ URL configurada e pronta para carregamento")
            else:
                st.error("‚ùå URL inv√°lida! Deve come√ßar com http:// ou https://")
    
    with tab3:
        st.markdown("""
        **üåê URLs de Exemplo para Teste R√°pido:**
        
        **üìä Datasets P√∫blicos Populares:**
        - **Iris (Flores):** Classifica√ß√£o de esp√©cies - 150 registros
        - **Tips (Gorjetas):** An√°lise de restaurante - 244 registros  
        - **Titanic:** Passageiros do Titanic - 891 registros
        """)
        
        example_url = st.selectbox(
            "Escolha um dataset de exemplo:",
            ["", 
             "https://raw.githubusercontent.com/mwaskom/seaborn-data/master/iris.csv",
             "https://raw.githubusercontent.com/mwaskom/seaborn-data/master/tips.csv",
             "https://raw.githubusercontent.com/datasciencedojo/datasets/master/titanic.csv"],
            format_func=lambda x: {
                "": "Selecione um exemplo...",
                "https://raw.githubusercontent.com/mwaskom/seaborn-data/master/iris.csv": "üå∏ Iris Dataset (flores)",
                "https://raw.githubusercontent.com/mwaskom/seaborn-data/master/tips.csv": "üçΩÔ∏è Tips Dataset (gorjetas)",
                "https://raw.githubusercontent.com/datasciencedojo/datasets/master/titanic.csv": "üö¢ Titanic Dataset (passageiros)"
            }.get(x, x),
            key="example_selector"
        )
        
        if example_url:
            dataset_source = example_url
            # Mostrar nome do arquivo
            example_filename = example_url.split('/')[-1]
            st.text_input(
                "üîó Exemplo selecionado:", 
                value=example_filename, 
                disabled=True,
                key="example_display"
            )
            st.success(f"‚úÖ Exemplo selecionado: {example_filename}")
    
    return dataset_source

def initialize_eda_system(llm_provider: str, model_name: str, max_tokens: int):
    """Inicializa sistema EDA com detec√ß√£o de mudan√ßas"""
    current_config = f"{llm_provider}-{model_name}-{max_tokens}"
    
    # Verificar se configura√ß√£o mudou
    if (st.session_state.current_config != current_config or 
        not st.session_state.system_initialized):
        
        with st.spinner(f"ü§ñ Inicializando sistema: {llm_provider.upper()} - {model_name} (tokens: {max_tokens})"):
            try:
                # Limpar sistema anterior se existir
                if 'eda_system' in st.session_state:
                    del st.session_state.eda_system
                
                # Resetar dataset se configura√ß√£o mudou
                if st.session_state.current_config != current_config:
                    if st.session_state.get('dataset_loaded'):
                        st.session_state.dataset_loaded = False
                        st.session_state.chat_history = []
                        st.warning("‚ö†Ô∏è Configura√ß√£o do modelo mudou! Recarregue seu dataset.")
                
                # Inicializar novo sistema
                eda_system = EDACrewSystem(llm_provider, model_name, max_tokens)
                
                # Salvar no estado
                st.session_state.eda_system = eda_system
                st.session_state.current_config = current_config
                st.session_state.system_initialized = True
                
                st.success(f"‚úÖ Sistema inicializado: {llm_provider.upper()} - {model_name}")
                return True
                
            except Exception as e:
                st.session_state.system_initialized = False
                error_msg = str(e)
                
                # Usar fun√ß√£o de rate limit handler
                if handle_rate_limit_error(error_msg, llm_provider):
                    return False
                elif "api" in error_msg.lower() and "key" in error_msg.lower():
                    st.error(f"üîë **Erro de API Key - {llm_provider.upper()}**\n\nVerifique se a chave est√° correta no arquivo .env")
                else:
                    st.error(f"‚ùå **Erro de inicializa√ß√£o {llm_provider.upper()}:**\n{error_msg}")
                
                return False
    
    return True

def process_dataset_loading(dataset_source: str):
    """Processa carregamento do dataset - VERS√ÉO CORRIGIDA"""
    # CORRE√á√ÉO: Bot√µes com textos mais apropriados
    col1, col2 = st.columns([4, 1])  # Bot√£o principal maior
    
    with col1:
        load_button = st.button(
            "üìä Processar Carregamento",  # MUDAN√áA: Texto mais apropriado para esta fase
            type="primary", 
            use_container_width=True,
            key="load_dataset_btn"
        )
    
    with col2:
        # Bot√£o finalizar tamb√©m na p√°gina de carregamento
        finalizar_load_btn = st.button(
            "‚úÖ Finalizar", 
            key="finalizar_load", 
            use_container_width=True,
            help="Encerrar aplica√ß√£o"
        )
    
    # Processar bot√£o finalizar
    if finalizar_load_btn:
        finalize_session()
        return
    
    if load_button:
        if not st.session_state.get('system_initialized'):
            st.error("‚ùå Sistema n√£o inicializado! Verifique configura√ß√µes na sidebar.")
            return
        
        # Resetar estado antes do carregamento
        st.session_state.dataset_loaded = False
        st.session_state.chat_history = []
        st.session_state.session_finalized = False
        
        # Salvar fonte do dataset
        st.session_state.dataset_source = dataset_source
        
        with st.spinner("üìä Carregando e analisando dataset..."):
            try:
                # Mostrar progresso
                progress_bar = st.progress(0)
                status_text = st.empty()
                
                status_text.text("üìÑ Inicializando carregamento...")
                progress_bar.progress(20)
                
                # Carregar dataset com o sistema EDA
                status_text.text("üì• Baixando/lendo arquivo CSV...")
                progress_bar.progress(50)
                
                result = st.session_state.eda_system.load_dataset(dataset_source)
                
                status_text.text("üß† Executando an√°lise inicial...")
                progress_bar.progress(80)
                
                # Verificar resultado
                has_error = any(keyword in result.lower() for keyword in 
                              ['erro', 'error', 'exception', 'rate limit', 'failed', 'badrequest'])
                
                progress_bar.progress(100)
                status_text.empty()
                progress_bar.empty()
                
                if has_error:
                    # ERRO - N√£o marcar como carregado
                    st.session_state.dataset_loaded = False
                    
                    # Usar fun√ß√£o de rate limit handler
                    if not handle_rate_limit_error(result, st.session_state.get('current_config', '')):
                        if "badrequest" in result.lower() and "provider not provided" in result.lower():
                            st.error("üîß **Erro de configura√ß√£o do modelo Groq.** Mude para OpenAI temporariamente.")
                        else:
                            st.error("‚ùå **Falha no carregamento**")
                            
                        st.markdown(f'<div class="warning-box"><strong>Detalhes do erro:</strong><br>{result}</div>', 
                                  unsafe_allow_html=True)
                    
                    # Sugest√µes baseadas no tipo de erro
                    if "groq" in st.session_state.get('current_config', '').lower():
                        st.info("üí° **Sugest√£o:** Mude para OpenAI na sidebar (mais est√°vel) ou reduza tokens para Groq.")
                    
                else:
                    # SUCESSO - Marcar como carregado
                    st.session_state.dataset_loaded = True
                    
                    # Extrair e salvar informa√ß√µes do dataset
                    dataset_name = os.path.basename(dataset_source) if dataset_source else 'Dataset'
                    if dataset_source.startswith(('http://', 'https://')):
                        dataset_name = dataset_source.split('/')[-1]
                        if '?' in dataset_name:
                            dataset_name = dataset_name.split('?')[0]
                    
                    st.session_state.current_dataset_info = {
                        'name': dataset_name,
                        'source': dataset_source,
                        'loaded_at': datetime.now().isoformat(),
                        'analysis_result': result
                    }
                    
                    # Mostrar resultado
                    st.markdown('<div class="agent-response">', unsafe_allow_html=True)
                    st.markdown("**ü§ñ Agente Explorador de Dados:**")
                    st.markdown(result)
                    st.markdown('</div>', unsafe_allow_html=True)
                    
                    # Salvar no hist√≥rico
                    st.session_state.chat_history.append({
                        'type': 'system',
                        'message': f'Dataset carregado: {dataset_name}',
                        'response': result,
                        'dataset_info': st.session_state.current_dataset_info
                    })
                    
                    st.success("‚úÖ **Dataset carregado com sucesso!** Agora voc√™ pode fazer perguntas sobre os dados.")
                    st.balloons()
                    
                    # CORRE√á√ÉO: Bot√£o maior e texto mais apropriado
                    st.markdown("---")
                    col1, col2, col3 = st.columns([1, 2, 1])  # Centralizar
                    with col2:
                        if st.button(
                            "üöÄ Iniciar An√°lise Interativa", 
                            type="primary", 
                            key="goto_chat",
                            use_container_width=True,  # Bot√£o maior
                            help="Ir para o chat interativo com os agentes"
                        ):
                            st.rerun()
            
            except Exception as e:
                st.session_state.dataset_loaded = False
                error_msg = str(e)
                
                # Usar fun√ß√£o de rate limit handler
                if not handle_rate_limit_error(error_msg, st.session_state.get('current_config', '')):
                    if "api" in error_msg.lower() and "key" in error_msg.lower():
                        st.error("üîë **Erro de API Key!** Verifique suas chaves no arquivo .env")
                    else:
                        st.error(f"‚ùå **Erro t√©cnico:** {error_msg}")
                
                # Sugest√£o de solu√ß√£o
                st.info("üí° **Dicas para resolver:**\n- Use OpenAI em vez de Groq\n- Verifique suas API keys\n- Tente um arquivo CSV menor")

def chat_interface():
    """Interface de chat com agentes"""
    st.header("üí¨ Chat com Agentes Inteligentes")
    
    if not st.session_state.dataset_loaded:
        st.warning("‚ö†Ô∏è Carregue um dataset primeiro!")
        return
    
    # Mostrar informa√ß√µes do dataset atual
    if st.session_state.get('current_dataset_info'):
        dataset_info = st.session_state.current_dataset_info
        dataset_source = dataset_info.get('source', '')
        dataset_display = dataset_source
        
        # Encurtar URL se muito longa
        if len(dataset_display) > 60:
            dataset_display = dataset_display[:57] + "..."
            
        st.markdown(f"""
        <div class="dataset-info">
        <strong>üìä Dataset Ativo:</strong> {dataset_info.get('name', 'Desconhecido')}<br>
        <strong>üìç Fonte:</strong> {dataset_display}<br>
        <strong>‚è∞ Carregado:</strong> {dataset_info.get('loaded_at', 'N/A')[:16].replace('T', ' ')}
        </div>
        """, unsafe_allow_html=True)
    
    # Mostrar hist√≥rico de conversas
    if st.session_state.chat_history:
        st.subheader("üìÉ Hist√≥rico de Conversas")
        
        for i, chat in enumerate(st.session_state.chat_history):
            if chat['type'] == 'user':
                st.markdown(f"""
                <div class="chat-message">
                <strong>üë§ Voc√™:</strong> {chat["message"]}
                </div>
                """, unsafe_allow_html=True)
                
            elif chat['type'] == 'agent':
                st.markdown(f"""
                <div class="agent-response">
                <strong>ü§ñ Agente:</strong><br>
                {chat["response"]}
                </div>
                """, unsafe_allow_html=True)
                
                # Mostrar gr√°ficos se houver
                if 'image_path' in chat and chat.get('image_path'):
                    if os.path.exists(chat['image_path']):
                        try:
                            image = Image.open(chat['image_path'])
                            st.image(image, caption="Visualiza√ß√£o gerada", use_column_width=True)
                        except Exception as e:
                            st.warning(f"‚ö†Ô∏è Erro ao exibir gr√°fico: {str(e)}")
    
    # Nova pergunta
    st.subheader("‚ùì Fa√ßa sua Pergunta")
    
    # Exemplos em expander
    with st.expander("üí° Exemplos de Perguntas √öteis"):
        col1, col2 = st.columns(2)
        
        with col1:
            st.markdown("""
            **üìä Informa√ß√µes B√°sicas:**
            - Qual arquivo CSV estamos analisando?
            - Quantas linhas e colunas tem o dataset?
            - Quais s√£o os tipos de dados?
            - Existem valores nulos ou faltantes?
            - Mostre as primeiras linhas dos dados
            """)
            
        with col2:
            st.markdown("""
            **üîç An√°lises Avan√ßadas:**
            - Mostre estat√≠sticas descritivas completas
            - Existem outliers nos dados?
            - Como as vari√°veis se relacionam entre si?
            - Crie um gr√°fico de correla√ß√£o
            - Quais s√£o suas conclus√µes sobre os dados?
            """)
    
    # Campo de pergunta
    user_question = st.text_area(
        "Digite sua pergunta sobre os dados:",
        height=100,
        placeholder="Ex: Qual arquivo CSV estamos analisando?",
        key="user_question_input"
    )
    
    # SE√á√ÉO DE BOT√ïES - Layout garantido
    st.markdown("---")
    st.markdown("### üéõÔ∏è A√ß√µes Dispon√≠veis")
    
    # Criar 4 colunas para os bot√µes
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        btn_enviar = st.button(
            label="ü§ñ Enviar",
            key="btn_enviar_question",
            help="Enviar pergunta para an√°lise pelos agentes",
            use_container_width=True,
            type="primary"
        )
    
    with col2:
        btn_conclusoes = st.button(
            label="üìã Conclus√µes", 
            key="btn_get_conclusions",
            help="Obter conclus√µes consolidadas de todas as an√°lises",
            use_container_width=True
        )
    
    with col3:
        btn_nova_sessao = st.button(
            label="üîÑ Nova Sess√£o",
            key="btn_restart_session", 
            help="Limpar hist√≥rico e carregar novo dataset",
            use_container_width=True
        )
    
    with col4:
        btn_finalizar = st.button(
            label="‚úÖ Finalizar",
            key="btn_finalize_session",
            help="Encerrar sess√£o atual",
            use_container_width=True,
            type="secondary"
        )
    
    # Processar a√ß√µes dos bot√µes
    if btn_enviar:
        if user_question and user_question.strip():
            process_user_question(user_question.strip())
        else:
            st.warning("‚ö†Ô∏è Digite uma pergunta primeiro!")
    
    if btn_conclusoes:
        get_final_conclusions()
    
    if btn_nova_sessao:
        restart_session_to_upload()
    
    if btn_finalizar:
        finalize_session()

def process_user_question(question: str):
    """Processa pergunta do usu√°rio com contexto do dataset"""
    with st.spinner(f"ü§ñ Agentes analisando: {question[:50]}..."):
        try:
            # Adicionar contexto do dataset √† pergunta para melhor resposta
            dataset_info = st.session_state.get('current_dataset_info', {})
            
            # Mostrar progresso
            progress = st.progress(0)
            status = st.empty()
            
            status.text("üß† Processando pergunta...")
            progress.progress(30)
            
            status.text("ü§ñ Agentes colaborando...")
            progress.progress(60)
            
            # Executar an√°lise
            result = st.session_state.eda_system.analyze_question(question)
            
            status.text("üìù Preparando resposta...")
            progress.progress(90)
            
            # Limpar progresso
            progress.progress(100)
            progress.empty()
            status.empty()
            
            # Adicionar ao hist√≥rico
            st.session_state.chat_history.append({
                'type': 'user',
                'message': question,
                'timestamp': datetime.now().isoformat()
            })
            
            st.session_state.chat_history.append({
                'type': 'agent', 
                'response': result,
                'timestamp': datetime.now().isoformat()
            })
            
            # Rerun para mostrar nova conversa
            st.rerun()
            
        except Exception as e:
            error_msg = str(e)
            if not handle_rate_limit_error(error_msg, st.session_state.get('current_config', '')):
                st.error(f"‚ùå **Erro ao processar pergunta:** {error_msg}")

def get_final_conclusions():
    """Obter conclus√µes finais consolidadas"""
    with st.spinner("ü§ñ Gerando conclus√µes consolidadas..."):
        try:
            progress = st.progress(0)
            status = st.empty()
            
            status.text("üìä Revisando todas as an√°lises...")
            progress.progress(40)
            
            status.text("üß† Consolidando insights...")
            progress.progress(70)
            
            conclusions = st.session_state.eda_system.get_conclusions()
            
            status.text("üìã Preparando relat√≥rio final...")
            progress.progress(100)
            
            # Limpar progresso
            progress.empty()
            status.empty()
            
            # Adicionar conclus√µes ao hist√≥rico
            dataset_info = st.session_state.get('current_dataset_info', {})
            dataset_name = dataset_info.get('name', 'Dataset')
            
            st.session_state.chat_history.append({
                'type': 'agent',
                'response': f"**üìã CONCLUS√ïES FINAIS - {dataset_name}:**\n\n{conclusions}",
                'timestamp': datetime.now().isoformat(),
                'is_conclusion': True
            })
            
            st.rerun()
            
        except Exception as e:
            error_msg = str(e)
            if not handle_rate_limit_error(error_msg, st.session_state.get('current_config', '')):
                st.error(f"‚ùå **Erro ao gerar conclus√µes:** {error_msg}")

def finalize_session():
    """Finalizar sess√£o com resumo"""
    st.session_state.session_finalized = True
    
    st.markdown("""
    <div class="success-box">
    <h3>‚úÖ Sess√£o Finalizada com Sucesso!</h3>
    <p><strong>Obrigado por usar o EDA Agente Inteligente!</strong></p>
    <p>Sua an√°lise explorat√≥ria foi conclu√≠da.</p>
    </div>
    """, unsafe_allow_html=True)
    
    # Estat√≠sticas da sess√£o
    if st.session_state.chat_history:
        total_questions = len([c for c in st.session_state.chat_history if c['type'] == 'user'])
        dataset_info = st.session_state.get('current_dataset_info', {})
        dataset_name = dataset_info.get('name', 'Dataset')
        
        st.markdown(f"""
        <div class="dataset-info">
        <strong>üìä Resumo da Sess√£o:</strong><br>
        ‚Ä¢ <strong>Dataset analisado:</strong> {dataset_name}<br>
        ‚Ä¢ <strong>Perguntas respondidas:</strong> {total_questions}<br>
        ‚Ä¢ <strong>An√°lises realizadas:</strong> {len(st.session_state.chat_history)} intera√ß√µes<br>
        ‚Ä¢ <strong>Tempo de sess√£o:</strong> {datetime.now().strftime('%H:%M:%S')}
        </div>
        """, unsafe_allow_html=True)
    
    # Op√ß√µes finais
    st.markdown("### üìã Op√ß√µes Finais")
    col1, col2 = st.columns(2)
    
    with col1:
        if st.button("üíæ Baixar Hist√≥rico", key="download_history_final", use_container_width=True):
            download_history()
    
    with col2:
        if st.button("üöÄ Nova Sess√£o", key="new_session_from_final", use_container_width=True):
            restart_session_to_upload()

def download_history():
    """Download do hist√≥rico da sess√£o"""
    if st.session_state.chat_history:
        history_data = {
            "session_info": {
                "timestamp": datetime.now().isoformat(),
                "system_config": st.session_state.get('current_config', 'unknown'),
                "dataset_info": st.session_state.get('current_dataset_info', {})
            },
            "conversation": st.session_state.chat_history,
            "total_interactions": len(st.session_state.chat_history),
            "questions_asked": len([c for c in st.session_state.chat_history if c['type'] == 'user'])
        }
        
        json_str = json.dumps(history_data, indent=2, ensure_ascii=False)
        
        # Nome do arquivo baseado no dataset
        dataset_name = st.session_state.get('current_dataset_info', {}).get('name', 'dataset')
        if dataset_name.endswith('.csv'):
            dataset_name = dataset_name[:-4]
        
        filename = f"eda_analysis_{dataset_name}_{datetime.now().strftime('%Y%m%d_%H%M')}.json"
        
        st.download_button(
            label="üì• Download Hist√≥rico (JSON)",
            data=json_str,
            file_name=filename,
            mime="application/json",
            help="Baixar hist√≥rico completo da sess√£o de an√°lise",
            key="download_btn"
        )

def restart_session_to_upload():
    """Reiniciar sess√£o - VOLTA PARA P√ÅGINA DE UPLOAD"""
    # Limpar APENAS dados da sess√£o, mant√©m sistema inicializado
    session_keys_to_clear = [
        'dataset_loaded', 
        'chat_history', 
        'current_dataset_info', 
        'dataset_source', 
        'session_finalized'
    ]
    
    for key in session_keys_to_clear:
        if key in st.session_state:
            del st.session_state[key]
    
    clean_temp_files()
    st.success("üîÑ **Nova sess√£o iniciada!** Carregue um novo dataset para an√°lise.")
    st.rerun()

def main():
    """Fun√ß√£o principal da aplica√ß√£o"""
    # Cabe√ßalho principal
    st.markdown("""
    <div class="main-header">
        <h1>ü§ñ EDA Agente Inteligente</h1>
        <p>An√°lise Explorat√≥ria de Dados com Agentes CrewAI</p>
        <small>Powered by Groq & OpenAI</small>
    </div>
    """, unsafe_allow_html=True)
    
    # Inicializar todos os estados da sess√£o
    initialize_session_state()
    
    # Se sess√£o foi finalizada, mostrar apenas p√°gina final
    if st.session_state.get('session_finalized'):
        finalize_session()
        return
    
    # Configurar sidebar e obter configura√ß√µes
    llm_provider, model_name, max_tokens = setup_sidebar()
    
    # Verificar se API keys est√£o configuradas
    issues = Config.validate_keys()
    if issues:
        st.error("‚ö†Ô∏è **API Keys n√£o configuradas!**")
        st.markdown("""
        **Para usar o sistema:**
        1. **Edite o arquivo `.env`** na pasta do projeto
        2. **Adicione suas chaves API:**
           ```
           GROQ_API_KEY=gsk_sua_chave_groq_aqui
           OPENAI_API_KEY=sk_sua_chave_openai_aqui
           ```
        3. **Reinicie a aplica√ß√£o** (Ctrl+C e execute novamente)
        
        **Como obter as chaves:**
        - **Groq**: https://console.groq.com ‚Üí API Keys
        - **OpenAI**: https://platform.openai.com ‚Üí API Keys
        """)
        st.stop()
    
    # Inicializar sistema EDA
    system_ready = initialize_eda_system(llm_provider, model_name, max_tokens)
    
    if not system_ready:
        st.error("‚ùå **Sistema n√£o p√¥de ser inicializado.** Verifique as configura√ß√µes na sidebar.")
        st.info("üí° **Dica:** Se usar Groq, tente OpenAI ou reduza o limite de tokens.")
        return
    
    # Interface principal baseada no estado
    if not st.session_state.dataset_loaded:
        # P√°gina de carregamento de dataset
        dataset_source = load_dataset_section()
        
        # CORRE√á√ÉO: BOT√ÉO FINALIZAR SEMPRE VIS√çVEL NA P√ÅGINA INICIAL
        # Mesmo quando n√£o h√° dataset selecionado, mostrar bot√£o Finalizar
        if not dataset_source:
            st.markdown("---")
            st.markdown("### ‚úÖ Op√ß√µes Gerais")
            col1, col2, col3 = st.columns([2, 1, 2])
            with col2:
                if st.button(
                    "‚úÖ Finalizar", 
                    key="finalizar_inicial",
                    use_container_width=True,
                    help="Encerrar aplica√ß√£o"
                ):
                    finalize_session()
        
        # Se h√° dataset selecionado, mostrar bot√£o de processamento
        if dataset_source:
            process_dataset_loading(dataset_source)
    else:
        # Interface de chat com dataset carregado
        chat_interface()
        
        # Op√ß√£o na sidebar para carregar novo dataset
        st.sidebar.markdown("---")
        st.sidebar.markdown("### üîÑ Op√ß√µes da Sess√£o")
        if st.sidebar.button("üìÅ Carregar Novo Dataset", use_container_width=True, key="sidebar_new_dataset"):
            restart_session_to_upload()
        
        if st.sidebar.button("‚úÖ Finalizar Sess√£o", use_container_width=True, key="sidebar_finalize"):
            finalize_session()
    
    # Rodap√© informativo
    st.markdown("---")
    st.markdown("""
    <div style="text-align: center; color: #666; padding: 1rem;">
        ü§ñ <strong>EDA Agente Inteligente</strong> | 
        Powered by <strong>CrewAI</strong> ‚Ä¢ <strong>Streamlit</strong> ‚Ä¢ <strong>Groq</strong>/<strong>OpenAI</strong><br>
        <small>Use o bot√£o "‚úÖ Finalizar" para encerrar sess√µes ‚Ä¢ Vers√£o Sincronizada</small>
    </div>
    """, unsafe_allow_html=True)
    
    # Limpeza autom√°tica de arquivos tempor√°rios
    clean_temp_files()

if __name__ == "__main__":
    main()